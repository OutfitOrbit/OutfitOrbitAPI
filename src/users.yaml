openapi: "3.0.0"
info:
  version: "0.0.1"
  title: "Outfit Orbit API documentation for Home page"
  description: "Outfit Orbit API documentation using OpenAPI and Swagger UI"
paths:
  /users/{id}:
    get:
      summary: "Get all information about the user"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "./components/user.yaml"
    patch:
      summary: "Edit user's information"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./components/userUpdate.yaml"
      responses:
        200:
          description: "OK"
    # delete:
    #   summary: "Delete all information related to the user"
    #   parameters:
    #     - in: path
    #       required: true
    #       name: id
    #       schema:
    #         type: string
    #   responses:
    #     200:
    #       description: "OK"

  /users/{id}/following-num:
    get:
      summary: "Get number of users the user is following"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  num:
                    type: number
  /users/{id}/followers-num:
    get:
      summary: "Get number of users following the user"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  num:
                    type: number

  /users/{id}/following:
    get:
      summary: "Get number and accounts user is following"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  following-acc:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                        user_name:
                          type: string
                        avatar:
                          type: string
                        followers_num:
                          type: number
  /users/{id}/followers:
    get:
      summary: "Get user's follower number and accounts"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  follower-acc:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                        user_name:
                          type: string
                        avatar:
                          type: string
                        followers_num:
                          type: number

  /users/{id}/posts:
    get:
      summary: "Get all posts created by the user"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    $ref: "./components/postTile.yaml"
  /users/{id}/favorites:
    get:
      summary: "Get all favorite posts of the user"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    $ref: "./components/postTile.yaml"
  /users/{id}/likes:
    get:
      summary: "Get all posts liked by the user"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    $ref: "./components/postTile.yaml"
  /users/{id}/view-history:
    get:
      summary: "Get view history of the user"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    $ref: "./components/postTile.yaml"

  /users/{id}/products:
    get:
      summary: "Get all products owned by the user"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: string
                        thumbnail:
                          type: string
                        title:
                          type: string
                        price:
                          type: string
                        shop_id:
                          type: string

  /users/{id}/follow:
    get:
      summary: "Get the following status between the user and the current user"
      parameters:
        - in: path
          required: true
          name: given-user-id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                current_user_id:
                  type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
    put:
      summary: "Make the current user follow the given user"
      parameters:
        - in: path
          required: true
          name: given-id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                current_user_id:
                  type: string
      responses:
        200:
          description: "OK"
          
    delete:
      summary: "Make the current user unfollow the given user"
      parameters:
        - in: path
          required: true
          name: given-id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                current_user_id:
                  type: string
      responses:
        200:
          description: "OK"

  /users/{id}/recently-visited:
    get:
      summary: "Get topics recently visited by the user"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        topic_id:
                          type: string
                        topic_name:
                          type: string
    delete:
      summary: "clear recently visited of the user"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        200:
          description: "OK"
